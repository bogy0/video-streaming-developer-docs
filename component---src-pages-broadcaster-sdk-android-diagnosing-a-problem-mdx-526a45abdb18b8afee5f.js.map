{"version":3,"sources":["webpack:///./src/pages/broadcaster-sdk-android/diagnosing-a-problem.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,+NACA,uCACA,icACA,wIACA,qBAAG,sBAAQC,WAAW,KAAnB,6BAAH,UACE,0BAAYA,WAAW,KAAvB,gBADF,gCAC2F,0BAAYA,WAAW,KAAvB,sBAD3F,gHAC0Q,0BAAYA,WAAW,KAAvB,gBAD1Q,KAEA,qBAAG,sBAAQA,WAAW,KAAnB,0BAAH,+CACuC,0BAAYA,WAAW,KAAvB,qBADvC,gBACqH,0BAAYA,WAAW,KAAvB,sBADrH,+HAEuH,kBAAIA,WAAW,KAAf,uBAFvH,MAE6K,0BAAYA,WAAW,KAAvB,sBAF7K,8CAE0R,kBAAIA,WAAW,KAAf,6BAF1R,MAEsV,0BAAYA,WAAW,KAAvB,2CAFtV,eAGA,2HAKJJ,EAAWK,gBAAiB","file":"component---src-pages-broadcaster-sdk-android-diagnosing-a-problem-mdx-526a45abdb18b8afee5f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`IBM Video Streaming SDK sends diagnostic data along with the video stream to IBM servers. Diagnostic data contains only transmit statistics, capture events. It does not contain personal information.`}</p>\n    <h2>{`Diagnostic ID`}</h2>\n    <p>{`Session diagnostic ID is an autogenerated unique identifier that helps IBM identify diagnostic data — produced during the current broadcast session — across IBM systems. SDK users can’t access the diagnostic data using the diagnostic ID, rather SDK users should use this ID to report a possible problem during a broadcast session. The accompanying diagnostic data will be used by IBM internally to debug your specific issue.`}</p>\n    <p>{`Please note that the diagnostic ID may change over time, therefore it is best to not cache or store this value.`}</p>\n    <p><strong parentName=\"p\">{`Lifecycle of diagnosticID`}</strong>{`:\nThe `}<inlineCode parentName=\"p\">{`diagnosticID`}</inlineCode>{` is first generated when the `}<inlineCode parentName=\"p\">{`AndroidBroadcaster`}</inlineCode>{` instance is created and re-generated after each broadcast stop, thus every broadcast session has its unique `}<inlineCode parentName=\"p\">{`diagnosticID`}</inlineCode>{`.`}</p>\n    <p><strong parentName=\"p\">{`Accessing diagnosticID`}</strong>{`:\nYou can always access the current ID via `}<inlineCode parentName=\"p\">{`getDiagnosticId()`}</inlineCode>{` function in `}<inlineCode parentName=\"p\">{`AndroidBroadcaster`}</inlineCode>{`.\nIf you want to store a diagnostic ID for a later bug report of the current session, we recommend to save it when the SDK `}<em parentName=\"p\">{`instance is created`}</em>{` ( `}<inlineCode parentName=\"p\">{`AndroidBroadcaster`}</inlineCode>{`’s constructor) and update it whenever the `}<em parentName=\"p\">{`SDK’s preview has started`}</em>{` ( `}<inlineCode parentName=\"p\">{`Broadcaster.LifeCycleListener.onReady()`}</inlineCode>{` callback).`}</p>\n    <p>{`If your app has its own diagnostics reporting you can send the diagnostic ID to your own records.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}