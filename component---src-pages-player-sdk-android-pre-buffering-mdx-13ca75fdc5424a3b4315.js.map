{"version":3,"sources":["webpack:///./src/pages/player-sdk-android/pre-buffering.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0eAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,wDAAuC,0BAAYC,WAAW,KAAvB,YAAvC,gJAE8B,0BAAYA,WAAW,KAAvB,cAF9B,eAEoG,0BAAYA,WAAW,KAAvB,UAFpG,2CAEkM,0BAAYA,WAAW,KAAvB,UAFlM,0NAKA,+BACA,sBACE,kBAAIA,WAAW,MAAf,YAAiC,0BAAYA,WAAW,MAAvB,iBAAjC,4CAAwI,0BAAYA,WAAW,MAAvB,iCAAxI,mEACA,kBAAIA,WAAW,MAAf,wCAA6D,sBAAQA,WAAW,MAAnB,YAA7D,aACA,kBAAIA,WAAW,MAAf,QAA6B,0BAAYA,WAAW,MAAvB,WAA7B,0HACqC,0BAAYA,WAAW,MAAvB,uBADrC,KAC2G,0BAAYA,WAAW,MAAvB,sBAD3G,QACmL,0BAAYA,WAAW,MAAvB,YADnL,yIAEqF,0BAAYA,WAAW,MAAvB,YAFrF,qEAGK,0BAAYA,WAAW,MAAvB,YAHL,4CAIA,kBAAIA,WAAW,MAAf,8DAAmF,0BAAYA,WAAW,MAAvB,cAAnF,UAAqJ,0BAAYA,WAAW,MAAvB,aACrJ,kBAAIA,WAAW,MAAf,QAA6B,0BAAYA,WAAW,MAAvB,wBAA7B,8DAEF,qBAAG,sBAAQA,WAAW,KAAnB,WAAH,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,kjBAgBL,qBAAG,sBAAQA,WAAW,KAAnB,QAAH,KACA,sBACE,kBAAIA,WAAW,MAAf,iJACA,kBAAIA,WAAW,MAAf,yDAA8E,0BAAYA,WAAW,MAAvB,aAA9E,YAMNJ,EAAWK,gBAAiB","file":"component---src-pages-player-sdk-android-pre-buffering-mdx-13ca75fdc5424a3b4315.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`UstreamPlayers initialized with `}<inlineCode parentName=\"p\">{`RECORDED`}</inlineCode>{` content can be buffered ahead of time.\nThis way an illusion of instantly starting videos can be achieved.\nBy the time a player is needed (`}<inlineCode parentName=\"p\">{`PlayerView`}</inlineCode>{` is set and `}<inlineCode parentName=\"p\">{`play()`}</inlineCode>{` is called) it is likely already in the `}<inlineCode parentName=\"p\">{`Paused`}</inlineCode>{` state, and playback can start immediately.\nThis feature’s most obvious use-case is a newsfeed like playback experience,\nwhen video contents are scrolling into the view and need to be started as soon as possible.`}</p>\n    <h2>{`Usage`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Create a `}<inlineCode parentName=\"li\">{`ustreamPlayer`}</inlineCode>{` instance with an ID. (The ID can be the `}<inlineCode parentName=\"li\">{`contentDescriptors.toString()`}</inlineCode>{` value for simplicity, if duplicate contents are not required.)`}</li>\n      <li parentName=\"ul\">{`Initialize the created player with a `}<strong parentName=\"li\">{`RECORDED`}</strong>{` content.`}</li>\n      <li parentName=\"ul\">{`Call `}<inlineCode parentName=\"li\">{`pause()`}</inlineCode>{` on the player. The UstreamPlayer will buffer the content then it will wait.\nAt this stage it is not required to call `}<inlineCode parentName=\"li\">{`setPlayerListener()`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`setErrorListener()`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`attach()`}</inlineCode>{` if the callbacks are not relevant for you.\nBut you are free to do so if you are interested in the callbacks, but make sure you call `}<inlineCode parentName=\"li\">{`detach()`}</inlineCode>{` before changing listeners or playerView on the player,\nand call `}<inlineCode parentName=\"li\">{`attach()`}</inlineCode>{` again so these changes can take effect.`}</li>\n      <li parentName=\"ul\">{`Later when the player is needed set your listeners and the `}<inlineCode parentName=\"li\">{`playerView`}</inlineCode>{`, call `}<inlineCode parentName=\"li\">{`attach()`}</inlineCode></li>\n      <li parentName=\"ul\">{`Call `}<inlineCode parentName=\"li\">{`ustreamPlayer.play()`}</inlineCode>{` and if it is buffered the playback will start instantly.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`UstreamPlayerFactory ustreamPlayerFactory = new UstreamPlayerFactory(API_KEY, activity);\nContentDescriptor contentDescriptor = new ContentDescriptor(ContentType.RECORDED, 123456L);\nUstreamPlayer player1 = ustreamPlayerFactory.createUstreamPlayer(contentDescriptor.toString());\nplayer1.initWithContent(contentDescriptor);\nplayer1.pause();\n\n//... AT A LATER POINT, WHEN THE PLAYER IS NEEDED:\n\nplayer1.setPlayerListener(playerListener);\nplayer1.setErrorListener(errorListener);\nplayer1.setPlayerView(playerView);\nplayer1.attach();\nplayer1.play();\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note`}</strong>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Only your device capabilities (mostly RAM) limit how many players you can pre-buffer. Keeping too many players can cause an OutOfMemoryError.`}</li>\n      <li parentName=\"ul\">{`When the players are no longer needed don’t forget to `}<inlineCode parentName=\"li\">{`destroy()`}</inlineCode>{` them.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}