{"version":3,"sources":["webpack:///./src/pages/broadcaster-sdk-ios/customization.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,4DACA,6EAA4D,0BAAYC,WAAW,KAAvB,6BAA5D,mBAAqJ,0BAAYA,WAAW,KAAvB,6BAArJ,sEACA,kDACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,0BAAYA,WAAW,KAAvB,yCAAnB,mBAAwH,0BAAYA,WAAW,KAAvB,6BAAxH,yLAAuX,0BAAYA,WAAW,KAAvB,6BAAvX,sBAAmd,0BAAYA,WAAW,KAAvB,8CAAnd,mCAA6kB,0BAAYA,WAAW,KAAvB,mCAE/kB,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAK,0BAAYA,WAAW,KAAvB,eAAnB,sCAGJ,iDACA,qBAAG,0BAAYA,WAAW,KAAvB,uDAAH,gWACA,+CACA,qBAAG,0BAAYA,WAAW,KAAvB,kDAAH,yGACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,+EAAmG,0BAAYA,WAAW,KAAvB,sCAAnG,8BAAgN,0BAAYA,WAAW,KAAvB,+CAAhN,MAEF,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,0EAA8F,0BAAYA,WAAW,KAAvB,iCAA9F,6BAAqM,0BAAYA,WAAW,KAAvB,6BAArM,gBAA2R,0BAAYA,WAAW,KAAvB,uBAA3R,wBAORJ,EAAWK,gBAAiB","file":"component---src-pages-broadcaster-sdk-ios-customization-mdx-f5db4ae90531c641452d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h2>{`Implementing a custom frame source`}</h2>\n    <p>{`You can create your own frame source by implementing `}<inlineCode parentName=\"p\">{`IBMWatsonMediaFrameSource`}</inlineCode>{` and passing to `}<inlineCode parentName=\"p\">{`IBMWatsonMediaBroadcaster`}</inlineCode>{` in its init method. Here are the main components of the protocol:`}</p>\n    <h3>{`Start and stop capturing`}</h3>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`startCaptureWithCompletion:completion`}</inlineCode>{` will called by `}<inlineCode parentName=\"p\">{`IBMWatsonMediaBroadcaster`}</inlineCode>{` to start to emitting frames. Call completion block once the frame sending is started or there was an error during the initialization process. If completion block returns with error `}<inlineCode parentName=\"p\">{`IBMWatsonMediaBroadcaster`}</inlineCode>{` state will set to `}<inlineCode parentName=\"p\">{`IBMWatsonMediaVideoBroadcasterStateInitial`}</inlineCode>{` and error will be reported via `}<inlineCode parentName=\"p\">{`broadcaster:didFailWithError:`}</inlineCode></p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\"><inlineCode parentName=\"p\">{`stopCapture`}</inlineCode>{` calls to the stop frame source.`}</p>\n      </li>\n    </ul>\n    <h3>{`Preferred output format`}</h3>\n    <p><inlineCode parentName=\"p\">{`IBMWatsonMediaCaptureConfig *preferredCaptureConfig`}</inlineCode>{` describes ideal output format of video and audio frames that source should send to the broadcaster. It may change during the session. Note that sending video or audio frames with different format will cause conversion. Video frames with different aspect ratio will be scaled to fit to the preferred resolution with preserved original aspect ratio.`}</p>\n    <h4>{`Frame source listener`}</h4>\n    <p><inlineCode parentName=\"p\">{`id<IBMWatsonMediaFrameSourceListener> delegate`}</inlineCode>{` provides methods to send audio or video frames, reporting error or custom events to the broadcaster.`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If a video or audio frame was produced you can send to the broadcaster with `}<inlineCode parentName=\"p\">{`frameSource:didOutputSampleBuffer:`}</inlineCode>{` (both video and audio) or `}<inlineCode parentName=\"p\">{`frameSource:didOutputPixelBuffer:timestamp:`}</inlineCode>{`.`}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If an error happened and capturing cannot be continued you should call `}<inlineCode parentName=\"p\">{`frameSource:didFailWithError:`}</inlineCode>{`. Broadcast will stop and `}<inlineCode parentName=\"p\">{`IBMWatsonMediaBroadcaster`}</inlineCode>{` will send a `}<inlineCode parentName=\"p\">{`didFailedWithError:`}</inlineCode>{` to its delegate.`}</p>\n      </li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}