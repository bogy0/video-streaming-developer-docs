{"version":3,"sources":["webpack:///./src/pages/player-sdk-android/changing-tracks.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"0eAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,8PACiE,0BAAYC,WAAW,KAAvB,4BADjE,4DAEA,+BACA,sBACE,kBAAIA,WAAW,MAAf,SAA8B,0BAAYA,WAAW,MAAvB,4BAA9B,mCAAuI,0BAAYA,WAAW,MAAvB,YAAvI,sBACA,kBAAIA,WAAW,MAAf,mGACqC,0BAAYA,WAAW,MAAvB,qEADrC,cAEA,kBAAIA,WAAW,MAAf,OAA4B,0BAAYA,WAAW,MAAvB,oBAA5B,yLAGF,qBAAG,sBAAQA,WAAW,KAAnB,WAAH,kDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,+zBAoBL,qBAAG,sBAAQA,WAAW,KAAnB,WAAH,wBAAuE,0BAAYA,WAAW,KAAvB,eAAvE,iBACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,ygBAeL,wGAKJJ,EAAWK,gBAAiB","file":"component---src-pages-player-sdk-android-changing-tracks-mdx-741dd7a43059104a8d6d.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/video-streaming-developer-docs/video-streaming-developer-docs/node_modules/gatsby-theme-carbon/src/templates/Default.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <p>{`Video streams can contain multiple tracks of different types (usually video, audio and text such as for captions). The player SDK lets you control which of these\ntracks are selected and presented to the user. See this document’s `}<inlineCode parentName=\"p\">{`MediaTrackChangeListener`}</inlineCode>{` section or the corresponding javadoc for API reference.`}</p>\n    <h2>{`Usage`}</h2>\n    <ul>\n      <li parentName=\"ul\">{`Set a `}<inlineCode parentName=\"li\">{`MediaTrackChangeListener`}</inlineCode>{` on an initialized player, call `}<inlineCode parentName=\"li\">{`attach()`}</inlineCode>{` when appropriate.`}</li>\n      <li parentName=\"ul\">{`When the player determines the available track groups\nit will report it through the listener’s `}<inlineCode parentName=\"li\">{`void onMediaTracksChanged(MediaTrackGroupHolder mediaTrackGroups)`}</inlineCode>{` callback.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`mediaTrackGroups`}</inlineCode>{` object holds the available media tracks for each track type. Use these to instruct the player’s specific renderers to\nplay a certain media track. A renderer can also be disabled.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`: Selecting a subtitle / closed captions track`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`UstreamPlayerFactory ustreamPlayerFactory = new UstreamPlayerFactory(API_KEY, activity);\nContentDescriptor contentDescriptor = new ContentDescriptor(ContentType.RECORDED, 123456L);\nUstreamPlayer player = ustreamPlayerFactory.createUstreamPlayer(contentDescriptor.toString());\nplayer.initWithContent(contentDescriptor);\nplayer.setMediaTracksChangeListener(mediaTrackChangeListener);\nplayer.attach();\n\n//... Inside the MediaTrackChangeListener\npublic void onMediaTracksChanged(MediaTrackGroupHolder mediaTrackGroups) {\n    availableTextTracks = trackGroupHolder.textTracks;\n    // Update the subtitle selector with the available subtitles\n}\n\n//... When the user selects a subtitle track from the selector:\nvoid selectTrack(MediaTrack mediaTrack) {\n    ustreamPlayer.selectTrackForRenderer(mediaTracks, null);\n}\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Example`}</strong>{`: Querying whether a `}<inlineCode parentName=\"p\">{`MediaFormat`}</inlineCode>{` is supported`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-java\"\n      }}>{`//... Inside the MediaTrackChangeListener\npublic void onMediaTracksChanged(MediaTrackGroupHolder mediaTrackGroups) {\n    for (MediaTrack videoTrack : mediaTrackGroups.videoTracks) {\n        for (MediaFormat videoFormat : videoTrack.mediaFormats) {\n            if (mediaTrackGroups.formatSupportInfo.isSupported(videoFormat)) {\n                logSupportedFormat(videoTrack, videoFormat);\n            } else {\n                logUnsupportedFormat(videoTrack, videoFormat);\n            }\n        }\n    }\n}\n`}</code></pre>\n    <p>{`For more detailed and general examples please consult the provided sample app.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}